import{_ as n,f as s}from"./app.06d697e7.js";const a={},p=s(`<h1 id="\u89E3\u91CA\u5668\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u89E3\u91CA\u5668\u6A21\u5F0F" aria-hidden="true">#</a> \u89E3\u91CA\u5668\u6A21\u5F0F</h1><h2 id="_1-1-\u5E94\u7528\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#_1-1-\u5E94\u7528\u5B9E\u4F8B" aria-hidden="true">#</a> 1.1 \u5E94\u7528\u5B9E\u4F8B</h2><h3 id="_1-1-1-\u4E1A\u52A1\u9700\u6C42" tabindex="-1"><a class="header-anchor" href="#_1-1-1-\u4E1A\u52A1\u9700\u6C42" aria-hidden="true">#</a> 1.1.1 \u4E1A\u52A1\u9700\u6C42</h3><p>\u901A\u8FC7\u89E3\u91CA\u5668\u6A21\u5F0F\u6765\u5B9E\u73B0\u56DB\u5219\u8FD0\u7B97\uFF0C\u5982\u8BA1\u7B97a+b-c\u7684\u503C\uFF0C\u5177\u4F53\u8981\u6C42\uFF1A</p><ol><li><p>\u5148\u8F93\u5165\u8868\u8FBE\u5F0F\u7684\u5F62\u5F0F\uFF0C\u6BD4\u5982 a+b+c-d+e\uFF0C\u8981\u6C42\u8868\u8FBE\u5F0F\u7684\u5B57\u6BCD\u4E0D\u80FD\u91CD\u590D</p></li><li><p>\u5728\u5206\u522B\u8F93\u5165a\u3001b\u3001c\u3001d\u3001e \u7684\u503C</p></li><li><p>\u6700\u540E\u6C42\u51FA\u7ED3\u679C\uFF0C\u5982\u56FE\uFF1A</p><p><img src="https://chen-coding.oss-cn-shenzhen.aliyuncs.com/rearend/designPattern/interpreter_start/image-20220731175426066.png?versionId=CAEQMRiBgMCp3KeBlRgiIGZiOTM1MWVmMmM4OTQ4Zjc4NTNkYzc1MGNhZmE4ZmQy" alt="image-20220731175426066" loading="lazy"></p></li></ol><h3 id="_1-1-2-\u89E3\u51B3\u65B9\u6848" tabindex="-1"><a class="header-anchor" href="#_1-1-2-\u89E3\u51B3\u65B9\u6848" aria-hidden="true">#</a> 1.1.2 \u89E3\u51B3\u65B9\u6848</h3><ol><li>\u7F16\u5199\u4E00\u4E2A\u65B9\u6CD5\uFF0C\u63A5\u6536\u8868\u8FBE\u5F0F\u7684\u5F62\u5F0F\uFF0C\u7136\u540E\u6839\u636E\u7528\u6237\u8F93\u5165\u7684\u6570\u503C\u8FDB\u884C\u89E3\u6790\uFF0C\u5F97\u5230\u7ED3\u679C\u3002</li><li>\u95EE\u9898\u5206\u6790\uFF1A\u5982\u679C\u52A0\u5165\u65B0\u7684\u8FD0\u7B97\u7B26\uFF0C\u6BD4\u5982 *\u3001/\u3001(\u3001 \u7B49\u7B49\uFF0C\u4E0D\u5229\u4E8E\u6269\u5C55\uFF0C\u53E6\u5916\u8BA9\u4E00\u4E2A\u65B9\u6CD5\u6765\u89E3\u6790\u4F1A\u9020\u6210\u7A0B\u5E8F\u7ED3\u6784\u6DF7\u4E71\uFF0C\u4E0D\u591F\u6E05\u6670\u3002</li></ol><h2 id="_1-2-\u89E3\u91CA\u5668\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#_1-2-\u89E3\u91CA\u5668\u6A21\u5F0F" aria-hidden="true">#</a> 1.2 \u89E3\u91CA\u5668\u6A21\u5F0F</h2><h3 id="_1-2-1-\u57FA\u672C\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#_1-2-1-\u57FA\u672C\u4ECB\u7ECD" aria-hidden="true">#</a> 1.2.1 \u57FA\u672C\u4ECB\u7ECD</h3><ol><li><p>\u5728\u7F16\u8BD1\u539F\u7406\u4E2D\uFF0C\u4E00\u4E2A\u7B97\u672F\u8868\u8FBE\u5F0F\u901A\u8FC7\u8BCD\u6CD5\u5206\u6790\u5668\u5F62\u6210\u8BCD\u6CD5\u5355\u5143\uFF0C\u800C\u540E\u8FD9\u4E9B\u8BCD\u6CD5\u5355\u5143\u518D\u901A\u8FC7\u8BED\u6CD5\u5206\u6790\u5668\u6784\u5EFA\u8BED\u6CD5\u5206\u6790\u6811\uFF0C\u6700\u7EC8\u5F62\u6210\u4E00\u9897\u62BD\u8C61\u7684\u8BED\u6CD5\u5206\u6790\u6811\uFF0C\u8FD9\u91CC\u7684\u8BCD\u6CD5\u5206\u6790\u5668\u548C\u8BED\u6CD5\u5206\u6790\u5668\u90FD\u53EF\u4EE5\u770B\u505A\u662F\u89E3\u91CA\u5668\u3002</p></li><li><p>\u89E3\u91CA\u5668\u6A21\u5F0F\uFF08Interpreter Pattern\uFF09\uFF1A\u662F\u6307\u7ED9\u5B9A\u4E00\u4E2A\u8BED\u8A00(\u8868\u8FBE\u5F0F) \uFF0C\u5B9A\u4E49\u5B83\u7684\u6587\u6CD5\u7684\u4E00\u79CD\u8868\u793A\uFF0C\u5E76\u5B9A\u4E49\u4E00\u4E2A\u89E3\u91CA\u5668\uFF0C\u4F7F\u7528\u8BE5\u89E3\u91CA\u5668\u6765\u89E3\u91CA\u8BED\u8A00\u4E2D\u7684\u53E5\u5B50(\u8868\u8FBE\u5F0F)\u3002</p></li><li><p>\u5E94\u7528\u573A\u666F</p><ul><li>\u5E94\u7528\u53EF\u4EE5\u5C06\u4E00\u4E2A\u9700\u8981\u89E3\u91CA\u6267\u884C\u7684\u8BED\u8A00\u4E2D\u7684\u53E5\u5B50\u8868\u793A\u4E3A\u4E00\u4E2A\u62BD\u8C61\u8BED\u6CD5\u6811</li><li>\u4E00\u4E9B\u91CD\u590D\u51FA\u73B0\u7684\u95EE\u9898\u53EF\u4EE5\u7528\u4E00\u79CD\u7B80\u5355\u7684\u8BED\u8A00\u6765\u8868\u8FBE</li><li>\u4E00\u4E2A\u7B80\u5355\u8BED\u6CD5\u9700\u8981\u89E3\u91CA\u7684\u573A\u666F</li></ul></li><li><p>\u8FD9\u6837\u7684\u4F8B\u5B50\u8FD8\u6709\uFF0C\u6BD4\u5982\u7F16\u8BD1\u5668\u3001\u8FD0\u7B97\u8868\u8FBE\u5F0F\u8BA1\u7B97\u3001\u6B63\u5219\u8868\u8FBE\u5F0F\u3001\u673A\u5668\u4EBA\u7B49\u3002</p></li></ol><h3 id="_1-2-2-\u539F\u7406\u7C7B\u56FE" tabindex="-1"><a class="header-anchor" href="#_1-2-2-\u539F\u7406\u7C7B\u56FE" aria-hidden="true">#</a> 1.2.2 \u539F\u7406\u7C7B\u56FE</h3><p><img src="https://chen-coding.oss-cn-shenzhen.aliyuncs.com/rearend/designPattern/interpreter_start/image-20220731194011408.png?versionId=CAEQMRiBgICk3KeBlRgiIDc1NWRiZGU4YzM1ZTQ4MjViZTJhZGFjZGNjZjAzNzVh" alt="image-20220731194011408" loading="lazy"></p><p>\u5BF9\u539F\u7406\u7C7B\u56FE\u7684\u8BF4\u660E-\u5373(\u89E3\u91CA\u5668\u6A21\u5F0F\u7684\u89D2\u8272\u53CA\u804C\u8D23)</p><ol><li><code>Context</code>: \u662F\u73AF\u5883\u89D2\u8272\uFF0C\u542B\u6709\u89E3\u91CA\u5668\u4E4B\u5916\u7684\u5168\u5C40\u4FE1\u606F\u3002</li><li><code>AbstractExpression</code>: \u62BD\u8C61\u8868\u8FBE\u5F0F\uFF0C\u58F0\u660E\u4E00\u4E2A\u62BD\u8C61\u7684\u89E3\u91CA\u64CD\u4F5C\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u4E3A\u62BD\u8C61\u8BED\u6CD5\u6811\u4E2D\u6240\u6709\u7684\u8282\u70B9\u6240\u5171\u4EAB\u3002</li><li><code>TerminalExpression</code>: \u4E3A\u7EC8\u7ED3\u7B26\u8868\u8FBE\u5F0F,\uFF0C\u5B9E\u73B0\u4E0E\u6587\u6CD5\u4E2D\u7684\u7EC8\u7ED3\u7B26\u76F8\u5173\u7684\u89E3\u91CA\u64CD\u4F5C\u3002</li><li><code>NonTermialExpression</code>: \u4E3A\u975E\u7EC8\u7ED3\u7B26\u8868\u8FBE\u5F0F\uFF0C\u4E3A\u6587\u6CD5\u4E2D\u7684\u975E\u7EC8\u7ED3\u7B26\u5B9E\u73B0\u89E3\u91CA\u64CD\u4F5C\u3002</li><li>\u8BF4\u660E\uFF1A \u8F93\u5165 <code>ContextheTerminalExpression</code> \u4FE1\u606F\u901A\u8FC7 Client \u8F93\u5165\u5373\u53EF\u3002</li></ol><h3 id="_1-2-3-\u4EE3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#_1-2-3-\u4EE3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> 1.2.3 \u4EE3\u7801\u5B9E\u73B0</h3><ol><li><p>\u7528\u89E3\u91CA\u5668\u6A21\u5F0F\u5B9E\u73B0\u56DB\u5219\u8FD0\u7B97</p></li><li><p>\u601D\u8DEF\u5206\u6790\u548C\u56FE\u89E3(\u7C7B\u56FE)</p><p><img src="https://chen-coding.oss-cn-shenzhen.aliyuncs.com/rearend/designPattern/interpreter_start/image-20220731201410780.png?versionId=CAEQMRiBgMD63qeBlRgiIGM2ZjJiNTRmNzg4NjRiZTk5MGJlYjllMzcxZDE0ZWM2" alt="image-20220731201410780" loading="lazy"></p></li><li><p>\u4EE3\u7801\u5B9E\u73B0</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * \u89E3\u91CA\u516C\u5F0F\u548C\u6570\u503C a+b-c
     * <span class="token keyword">@param</span> <span class="token parameter">map</span> key\u4E3A\u53C2\u6570 value \u4E3A\u53C2\u6570\u503C <span class="token punctuation">{</span>a=1,b=2,c=3<span class="token punctuation">}</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u83B7\u53D6\u53C2\u6570\u5BF9\u5E94\u7684\u503C</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbolExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span><span class="token punctuation">{</span>

    <span class="token comment">// \u7B26\u53F7\u5DE6\u8FB9\u7684\u8868\u8FBE\u5F0F</span>
    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>
    <span class="token comment">// \u7B26\u53F7\u53F3\u8FB9\u7684\u8868\u8FBE\u5F0F</span>
    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SymbolExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubtractExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpreter</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u8868\u8FBE\u5F0F</span>
    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expression<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token class-name">String</span> express<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5B89\u6392\u8FD0\u7B97\u5148\u540E\u987A\u5E8F</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expression</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Expression</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Expression</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> expression<span class="token punctuation">.</span><span class="token function">interpreter</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> calculate <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\u8868\u8FBE\u5F0F:&quot;</span> <span class="token operator">+</span> expression <span class="token operator">+</span> <span class="token string">&quot;\u7684\u8FD0\u7B97\u7ED3\u679C:&quot;</span> <span class="token operator">+</span> calculate<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u8F93\u51FA</span>
        <span class="token comment">// \u8BF7\u8F93\u5165\u8868\u8FBE\u5F0F:</span>
        <span class="token comment">// a+b-c</span>
        <span class="token comment">// \u8BF7\u8F93\u5165 a \u7684\u503C</span>
        <span class="token comment">// 20</span>
        <span class="token comment">// \u8BF7\u8F93\u5165 b \u7684\u503C</span>
        <span class="token comment">// 10</span>
        <span class="token comment">// \u8BF7\u8F93\u5165 c \u7684\u503C</span>
        <span class="token comment">// 20</span>
        <span class="token comment">// \u8868\u8FBE\u5F0F:a+b-c\u7684\u8FD0\u7B97\u7ED3\u679C:10</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\u8BF7\u8F93\u5165\u8868\u8FBE\u5F0F:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> expression<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> expression<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\u8BF7\u8F93\u5165 &quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; \u7684\u503C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div></li></ol><h2 id="_1-3-\u89E3\u91CA\u5668\u6A21\u5F0F\u5728spring\u6846\u67B6\u5E94\u7528\u7684\u6E90\u7801\u5256\u6790" tabindex="-1"><a class="header-anchor" href="#_1-3-\u89E3\u91CA\u5668\u6A21\u5F0F\u5728spring\u6846\u67B6\u5E94\u7528\u7684\u6E90\u7801\u5256\u6790" aria-hidden="true">#</a> 1.3 \u89E3\u91CA\u5668\u6A21\u5F0F\u5728Spring\u6846\u67B6\u5E94\u7528\u7684\u6E90\u7801\u5256\u6790</h2><ol><li><p>Spring\u6846\u67B6\u4E2D <code>SpelExpressionParser</code> \u5C31\u4F7F\u7528\u5230\u89E3\u91CA\u5668\u6A21\u5F0F</p></li><li><p>\u4EE3\u7801\u5206\u6790+Debug\u6E90\u7801</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterpreterTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpelExpressionParser</span> spelExpressionParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Expression</span> expression <span class="token operator">=</span> spelExpressionParser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;10+5-9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\u8FD0\u7B97\u7ED3\u679C\u503C:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8F93\u51FA</span>
        <span class="token comment">// \u8FD0\u7B97\u7ED3\u679C\u503C:6</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>\u8BF4\u660E</p></li></ol><h2 id="_1-4-\u89E3\u91CA\u5668\u6A21\u5F0F\u7684\u6CE8\u610F\u4E8B\u9879\u548C\u7EC6\u8282" tabindex="-1"><a class="header-anchor" href="#_1-4-\u89E3\u91CA\u5668\u6A21\u5F0F\u7684\u6CE8\u610F\u4E8B\u9879\u548C\u7EC6\u8282" aria-hidden="true">#</a> 1.4 \u89E3\u91CA\u5668\u6A21\u5F0F\u7684\u6CE8\u610F\u4E8B\u9879\u548C\u7EC6\u8282</h2><ol><li>\u5F53\u6709\u4E00\u4E2A\u8BED\u8A00\u9700\u8981\u89E3\u91CA\u6267\u884C\uFF0C\u53EF\u5C06\u8BE5\u8BED\u8A00\u4E2D\u7684\u53E5\u5B50\u8868\u793A\u4E3A\u4E00\u4E2A\u62BD\u8C61\u8BED\u6CD5\u6811\uFF0C\u5C31\u53EF\u4EE5\u8003\u8651\u4F7F\u7528\u89E3\u91CA\u5668\u6A21\u5F0F\uFF0C\u8BA9\u7A0B\u5E8F\u5177\u6709\u826F\u597D\u7684\u6269\u5C55\u6027\u3002</li><li>\u5E94\u7528\u573A\u666F\uFF1A\u7F16\u8BD1\u5668\u3001\u8FD0\u7B97\u8868\u8FBE\u5F0F\u8BA1\u7B97\u3001\u6B63\u5219\u8868\u8FBE\u5F0F\u3001\u673A\u5668\u4EBA\u7B49\u3002</li><li>\u4F7F\u7528\u89E3\u91CA\u5668\u53EF\u80FD\u5E26\u6765\u7684\u95EE\u9898\uFF1A\u89E3\u91CA\u5668\u6A21\u5F0F\u4F1A\u5F15\u8D77\u7C7B\u81A8\u80C0\u3001\u89E3\u91CA\u5668\u6A21\u5F0F\u91C7\u7528\u9012\u5F52\u8C03\u7528\u65B9\u6CD5\uFF0C\u5C06\u4F1A\u5BFC\u81F4\u8C03\u8BD5\u975E\u5E38\u590D\u6742\u3001\u6548\u7387\u53EF\u80FD\u964D\u4F4E\u3002</li></ol>`,20);function t(e,c){return p}var l=n(a,[["render",t],["__file","interpreter_start.html.vue"]]);export{l as default};
